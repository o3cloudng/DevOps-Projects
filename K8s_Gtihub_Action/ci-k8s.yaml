# This workflow will build a docker container, publish it to AWS Container Registry, and deploy it to EKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ECR_NAMESPACE and AWS_CLOUD_API_KEY
# 3. Change the values for the AWS_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, EKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to EKS

on: [push]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  AWS_CLOUD_API_KEY: ${{ secrets.AWS_CLOUD_API_KEY }}
  AWS_CLOUD_REGION: us-south
  ECR_NAMESPACE: ${{ secrets.ECR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.ECR.io
  IMAGE_NAME: hello-python
  EKS_CLUSTER: bq1sm2gd0sjtps7ajoa0 # name or id of cluster
  DEPLOYMENT_NAME: hello-python
  PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install AWS Cloud CLI
    - name: Install AWS Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.AWS.com/install/linux | sh
        AWScloud --version
        AWScloud config --check-version=false
        AWScloud plugin install -f kubernetes-service
        AWScloud plugin install -f container-registry
    # Authenticate with AWS Cloud CLI
    - name: Authenticate with AWS Cloud CLI
      run: |
        AWScloud login --apikey "${AWS_CLOUD_API_KEY}" -r "${AWS_CLOUD_REGION}" -g default
        AWScloud cr region-set "${AWS_CLOUD_REGION}"
        AWScloud cr login
    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ECR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
    # Push the image to AWS Container Registry
    - name: Push the image to ECR
      run: |
        docker push $REGISTRY_HOSTNAME/$ECR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
    # Deploy the Docker image to the EKS cluster
    - name: Deploy to EKS
      run: |
        AWScloud ks cluster config --cluster $EKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ECR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        kubectl get services -o wide